"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[283],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},p="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(t),u=i,m=p["".concat(l,".").concat(u)]||p[u]||g[u]||r;return t?a.createElement(m,o(o({ref:n},d),{},{components:t})):a.createElement(m,o({ref:n},d))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[p]="string"==typeof e?e:i,o[1]=s;for(var c=2;c<r;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},64043:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>g,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var a=t(87462),i=(t(67294),t(3905));const r={sidebar_label:"Canvas Rendering Target",sidebar_position:3},o="Canvas Rendering Target",s={unversionedId:"plugins/canvas-rendering-target",id:"version-4.1/plugins/canvas-rendering-target",title:"Canvas Rendering Target",description:"The renderer functions used within the plugins (both Custom Series, and Drawing",source:"@site/versioned_docs/version-4.1/plugins/canvas-rendering-target.md",sourceDirName:"plugins",slug:"/plugins/canvas-rendering-target",permalink:"/lightweight-charts/docs/plugins/canvas-rendering-target",draft:!1,tags:[],version:"4.1",sidebarPosition:3,frontMatter:{sidebar_label:"Canvas Rendering Target",sidebar_position:3},sidebar:"docsSidebar",previous:{title:"Custom Series Types",permalink:"/lightweight-charts/docs/plugins/custom_series"},next:{title:"Pixel Perfect Rendering",permalink:"/lightweight-charts/docs/plugins/pixel-perfect-rendering/"}},l={},c=[{value:"Using <code>CanvasRenderingTarget2D</code>",id:"using-canvasrenderingtarget2d",level:2},{value:"Difference between Bitmap and Media",id:"difference-between-bitmap-and-media",level:2},{value:"Bitmap Coordinate Space",id:"bitmap-coordinate-space",level:3},{value:"Bitmap Coordinate Space Usage",id:"bitmap-coordinate-space-usage",level:4},{value:"Media Coordinate Space",id:"media-coordinate-space",level:3},{value:"Media Coordinate Space Usage",id:"media-coordinate-space-usage",level:4},{value:"General Tips",id:"general-tips",level:2}],d={toc:c},p="wrapper";function g(e){let{components:n,...t}=e;return(0,i.kt)(p,(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"canvas-rendering-target"},"Canvas Rendering Target"),(0,i.kt)("p",null,"The renderer functions used within the plugins (both Custom Series, and Drawing\nPrimitives) are provided with a ",(0,i.kt)("inlineCode",{parentName:"p"},"CanvasRenderingTarget2D")," interface on which the\ndrawing logic (using the\n",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D"},"Browser's 2D Canvas API"),")\nshould be executed. ",(0,i.kt)("inlineCode",{parentName:"p"},"CanvasRenderingTarget2D")," is provided by the\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/tradingview/fancy-canvas"},"Fancy Canvas")," library."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"The typescript definitions can be viewed here:"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/fancy-canvas?activeTab=code"},"fancy-canvas on npmjs.com"))),(0,i.kt)("p",{parentName:"admonition"},"and specifically the definition for ",(0,i.kt)("inlineCode",{parentName:"p"},"CanvasRenderingTarget2D")," can be viewed\nhere:"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://unpkg.com/fancy-canvas/canvas-rendering-target.d.ts"},"canvas-rendering-target.d.ts")))),(0,i.kt)("h2",{id:"using-canvasrenderingtarget2d"},"Using ",(0,i.kt)("inlineCode",{parentName:"h2"},"CanvasRenderingTarget2D")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"CanvasRenderingTarget2D")," provides two rendering scope which you can use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"useMediaCoordinateSpace")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"useBitmapCoordinateSpace"))),(0,i.kt)("h2",{id:"difference-between-bitmap-and-media"},"Difference between Bitmap and Media"),(0,i.kt)("p",null,"Bitmap sizing represents the actual physical pixels on the device's screen,\nwhile the media size represents the size of a pixel according to the operating\nsystem (and browser) which is generally an integer representing the ratio of\nactual physical pixels are used to render a media pixel. This integer ratio is\nreferred to as the device pixel ratio."),(0,i.kt)("p",null,"Using the bitmap sizing allows for more control over the drawn image to ensure\nthat the graphics are crisp and pixel perfect, however this generally means that\nthe code will contain a lot multiplication of coordinates by the pixel ratio. In\ncases where you don't need to draw using the bitmap sizing then it is easier to\nuse media sizing as you don't need to worry about the devices pixel ratio."),(0,i.kt)("h3",{id:"bitmap-coordinate-space"},"Bitmap Coordinate Space"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"useBitmapCoordinateSpace")," can be used to if you would like draw using the\nactual devices pixels as the coordinate sizing. The provided scope (of type\n",(0,i.kt)("inlineCode",{parentName:"p"},"BitmapCoordinatesRenderingScope"),") contains readonly values for the following:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"context"),"\n(",(0,i.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D"},"CanvasRenderingContext2D"),").\nContext which can be used for rendering."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"horizontalPixelRatio")," (number)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"verticalPixelRatio")," (number)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bitmapSize")," (Size). Height and width of the canvas in bitmap dimensions."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"mediaSize")," (Size). Height and width of the canvas in media dimensions.")),(0,i.kt)("h4",{id:"bitmap-coordinate-space-usage"},"Bitmap Coordinate Space Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:"title='javascript'",title:"'javascript'"},"// target is an instance of CanvasRenderingTarget2D\ntarget.useBitmapCoordinateSpace(scope => {\n    // scope is an instance of BitmapCoordinatesRenderingScope\n\n    // example of drawing a filled rectangle which fills the canvas\n    scope.context.beginPath();\n    scope.context.rect(0, 0, scope.bitmapSize.width, scope.bitmapSize.height);\n    scope.context.fillStyle = 'rgba(100, 200, 50, 0.5)';\n    scope.context.fill();\n});\n")),(0,i.kt)("h3",{id:"media-coordinate-space"},"Media Coordinate Space"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"useMediaCoordinateSpace")," can be used to if you would like draw using the media\ndimensions as the coordinate sizing. The provided scope (of type\n",(0,i.kt)("inlineCode",{parentName:"p"},"MediaCoordinatesRenderingScope"),") contains readonly values for the following:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"context"),"\n(",(0,i.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D"},"CanvasRenderingContext2D"),").\nContext which can be used for rendering."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"mediaSize")," (Size). Height and width of the canvas in media dimensions.")),(0,i.kt)("h4",{id:"media-coordinate-space-usage"},"Media Coordinate Space Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:"title='javascript'",title:"'javascript'"},"// target is an instance of CanvasRenderingTarget2D\ntarget.useMediaCoordinateSpace(scope => {\n    // scope is an instance of BitmapCoordinatesRenderingScope\n\n    // example of drawing a filled rectangle which fills the canvas\n    scope.context.beginPath();\n    scope.context.rect(0, 0, scope.mediaSize.width, scope.mediaSize.height);\n    scope.context.fillStyle = 'rgba(100, 200, 50, 0.5)';\n    scope.context.fill();\n});\n")),(0,i.kt)("h2",{id:"general-tips"},"General Tips"),(0,i.kt)("p",null,"It is recommended that rendering functions should save and restore the canvas\ncontext before and after all the rendering logic to ensure that the canvas state\nis the same as when the renderer function was evoked. To handle the case\nwhen an error in the code might prevent the restore function from being evoked,\nyou should use the try - finally code block to ensure that the context is\ncorrectly restored in all cases."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note")," that ",(0,i.kt)("inlineCode",{parentName:"p"},"useBitmapCoordinateSpace")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"useMediaCoordinateSpace")," will automatically\nsave and restore the canvas context for the logic defined within them. This tip for your\nadditional rendering functions within the ",(0,i.kt)("inlineCode",{parentName:"p"},"use*CoordinateSpace"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:"title='javascript'",title:"'javascript'"},"function myRenderingFunction(scope) {\n    const ctx = scope.context;\n\n    // save the current state of the context to the stack\n    ctx.save();\n\n    try {\n        // example code\n        scope.context.beginPath();\n        scope.context.rect(0, 0, scope.mediaSize.width, scope.mediaSize.height);\n        scope.context.fillStyle = 'rgba(100, 200, 50, 0.5)';\n        scope.context.fill();\n    } finally {\n        // restore the saved context from the stack\n        ctx.restore();\n    }\n}\n\ntarget.useMediaCoordinateSpace(scope => {\n    myRenderingFunction(scope);\n    myOtherRenderingFunction(scope);\n    /* ... */\n});\n")))}g.isMDXComponent=!0}}]);