"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7747],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},h="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),h=l(n),u=r,g=h["".concat(c,".").concat(u)]||h[u]||p[u]||i;return n?a.createElement(g,o(o({ref:t},d),{},{components:n})):a.createElement(g,o({ref:t},d))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[h]="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},64554:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var a=n(87462),r=(n(67294),n(3905));const i={sidebar_position:1,sidebar_label:"Keyboard navigation",pagination_title:"Keyboard navigation",title:"Keyboard navigation",description:"In this section we will add keyboard navigation to the chart.",keywords:["a11y","accessibility","screenreaders","keyboard","assistive"],pagination_prev:"a11y/intro",pagination_next:"a11y/screenreader"},o="Keyboard navigation",s={unversionedId:"a11y/keyboard",id:"a11y/keyboard",title:"Keyboard navigation",description:"In this section we will add keyboard navigation to the chart.",source:"@site/tutorials/a11y/keyboard.mdx",sourceDirName:"a11y",slug:"/a11y/keyboard",permalink:"/lightweight-charts/tutorials/a11y/keyboard",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,sidebar_label:"Keyboard navigation",pagination_title:"Keyboard navigation",title:"Keyboard navigation",description:"In this section we will add keyboard navigation to the chart.",keywords:["a11y","accessibility","screenreaders","keyboard","assistive"],pagination_prev:"a11y/intro",pagination_next:"a11y/screenreader"},sidebar:"tutorialsSidebar",previous:{title:"Introduction",permalink:"/lightweight-charts/tutorials/a11y/intro"},next:{title:"Screen Readers",permalink:"/lightweight-charts/tutorials/a11y/screenreader"}},c={},l=[{value:"Purpose of keyboard navigation",id:"purpose-of-keyboard-navigation",level:2},{value:"Implementing keyboard actions with Lightweight Charts\u2122",id:"implementing-keyboard-actions-with-lightweight-charts",level:2},{value:"Setting focus on the chart",id:"setting-focus-on-the-chart",level:3},{value:"Adding event listener for keyboard actions",id:"adding-event-listener-for-keyboard-actions",level:3},{value:"Utilizing Lightweight Chart&#39;s API for actions",id:"utilizing-lightweight-charts-api-for-actions",level:3}],d={toc:l},h="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(h,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"keyboard-navigation"},"Keyboard navigation"),(0,r.kt)("h2",{id:"purpose-of-keyboard-navigation"},"Purpose of keyboard navigation"),(0,r.kt)("p",null,"One cornerstone of web accessibility is ensuring that sites and applications are\nfully operable via keyboard alone. This navigation method benefits a wide range\nof users, especially those who are unable to use a mouse or have visual\nimpairments."),(0,r.kt)("p",null,"Screen readers and other assistive technologies rely heavily on keyboard\ninteraction, and some users choose this method due to an acquired skill set or\npersonal preference. By including keyboard navigation in our charts, we make the\ntool more accessible and user-friendly, living up to the principles of inclusive\ndesign."),(0,r.kt)("h2",{id:"implementing-keyboard-actions-with-lightweight-charts"},"Implementing keyboard actions with Lightweight Charts\u2122"),(0,r.kt)("p",null,"The Lightweight Charts\u2122 API provides numerous methods that enable handling chart\nactions programmatically, making it possible to tie these actions to keyboard\nevents."),(0,r.kt)("p",null,"Here's a walk-through of how to add keyboard navigation to the chart."),(0,r.kt)("h3",{id:"setting-focus-on-the-chart"},"Setting focus on the chart"),(0,r.kt)("p",null,"Firstly, we must ensure the chart is programmatically focusable for keyboard\ninteraction. We can achieve this by placing a ",(0,r.kt)("inlineCode",{parentName:"p"},"tabindex")," attribute to the\nchart's container div:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<div id="chart" tabindex="0"></div>\n')),(0,r.kt)("p",null,"This can also be achieved via JavaScript:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const containerEl = chart.chartElement().parentElement;\ncontainerEl.tabIndex = 0;\n")),(0,r.kt)("h3",{id:"adding-event-listener-for-keyboard-actions"},"Adding event listener for keyboard actions"),(0,r.kt)("p",null,"Following that, we will tie specific chart interactions to keypress events using\nJavaScript's ",(0,r.kt)("inlineCode",{parentName:"p"},"addEventListener")," method. This will allow us to control the chart\nusing specific keystrokes:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const chartContainer = document.getElementById('chart');\nchartContainer.addEventListener('keydown', event => {\n    switch (event.key) {\n    case 'ArrowLeft':\n        // Action for ArrowLeft key\n        break;\n    case 'ArrowRight':\n        // Action for ArrowRight key\n        break;\n        // ... more cases\n    }\n});\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"addEventListener")," function lets us listen to ",(0,r.kt)("inlineCode",{parentName:"p"},"keydown")," events that occur\nwhen the user presses a key."),(0,r.kt)("h3",{id:"utilizing-lightweight-charts-api-for-actions"},"Utilizing Lightweight Chart's API for actions"),(0,r.kt)("p",null,"Next, for each case, we use Lightweight Chart's API for desired actions."),(0,r.kt)("p",null,"Let's assume we want the left arrow key to scroll the chart to the left, and the\nright arrow key to scroll it to the right:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"function shiftChart(diff) {\n    const currentPos = chart.timeScale().scrollPosition();\n    chart.timeScale().scrollToPosition(currentPos + diff, false);\n}\n\nchartContainer.addEventListener('keydown', event => {\n    switch (event.key) {\n    case 'ArrowLeft':\n        shiftChart(-10);\n        break;\n    case 'ArrowRight':\n        shiftChart(10);\n        break;\n    }\n});\n")),(0,r.kt)("p",null,"In the above JavaScript code, the ",(0,r.kt)("inlineCode",{parentName:"p"},"timeScale().scrollToPosition()")," method from\nLightweight Charts\u2122 API is used inside the event listener to scroll the chart\nwhenever the left or right arrow key is pressed."),(0,r.kt)("p",null,"Additionally, we can assign the up and down arrow keys to adjust the zoom level\nof the chart:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"function scaleChart(pct, zoomIn) {\n    const currentRange = chart.timeScale().getVisibleLogicalRange();\n    if (currentRange) {\n        const bars = currentRange.to - currentRange.from;\n        const direction = zoomIn ? -1 : 1;\n        const newRangeBars = bars * pct * direction + bars;\n        chart.timeScale().setVisibleLogicalRange({\n            to: currentRange.to,\n            from: currentRange.to - newRangeBars,\n        });\n    }\n}\n\nchartContainer.addEventListener('keydown', event => {\n    switch (event.key) {\n    // ...\n    case 'ArrowUp':\n        scaleChart(1 / 8, true);\n        break;\n    case 'ArrowDown':\n        scaleChart(1 / 8, false);\n        break;\n    }\n});\n")),(0,r.kt)("p",null,"We are scaling the chart by adjusting the ",(0,r.kt)("inlineCode",{parentName:"p"},"visibleLogicalRange")," instead of\nchanging the ",(0,r.kt)("inlineCode",{parentName:"p"},"barSpacing")," option on the time scale. In this example, we are\nkeeping the right data point fixed when zooming in or out by retaining the ",(0,r.kt)("inlineCode",{parentName:"p"},"to"),"\nvalue and only modifying the ",(0,r.kt)("inlineCode",{parentName:"p"},"from")," value."),(0,r.kt)("hr",null),(0,r.kt)("p",null,"This keyboard navigation inclusion makes the chart's underlying data more\naccessible to a wider audience, ensuring a diverse user base can fully interact\nwith the chart's functions."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Note that more keyboard actions can be added according to\nproject-specific requirements, thereby further enhancing the navigation controls\nand accessibility.")),(0,r.kt)("p",null,"In the next section, we'll continue enhancing our accessible charts by\nintegrating ARIA (Accessible Rich Internet Applications) roles and properties and generating descriptive content."))}p.isMDXComponent=!0}}]);