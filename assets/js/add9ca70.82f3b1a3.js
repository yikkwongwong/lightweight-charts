"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9672,7918],{41012:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>O,contentTitle:()=>R,default:()=>L,frontMatter:()=>w,metadata:()=>b,toc:()=>_});var r=n(87462),a=n(67294),o=n(3905),i=n(96383),s=n(98007);const c="// delete-start\n/* Note: this file shouldn't be used directly because it has some constants which are set by\nthe docusaurus site to ensure that the chart looks great in both dark and light color themes.\nIf you want to use this example then please copy the code presented on the documentation site.\n[link](https://tradingview.github.io/lightweight-charts/tutorials/react/advanced) */\n// delete-end\nimport { createChart } from 'lightweight-charts';\nimport React, {\n\tcreateContext,\n\tforwardRef,\n\tuseCallback,\n\tuseContext,\n\tuseEffect,\n\tuseImperativeHandle,\n\tuseLayoutEffect,\n\tuseRef,\n\tuseState,\n} from 'react';\n\nconst Context = createContext();\n\nconst initialData = [\n\t{ time: '2018-10-11', value: 52.89 },\n\t{ time: '2018-10-12', value: 51.65 },\n\t{ time: '2018-10-13', value: 51.56 },\n\t{ time: '2018-10-14', value: 50.19 },\n\t{ time: '2018-10-15', value: 51.86 },\n\t{ time: '2018-10-16', value: 51.25 },\n];\nconst currentDate = new Date(initialData[initialData.length - 1].time);\n\nexport const App = props => {\n\tconst {\n\t\tcolors: {\n\t\t\tbackgroundColor = CHART_BACKGROUND_COLOR,\n\t\t\tlineColor = LINE_LINE_COLOR,\n\t\t\ttextColor = CHART_TEXT_COLOR,\n\t\t} = {},\n\t} = props;\n\n\tconst [chartLayoutOptions, setChartLayoutOptions] = useState({});\n\t// The following variables illustrate how a series could be updated.\n\tconst series1 = useRef(null);\n\tconst [started, setStarted] = useState(false);\n\n\t// The purpose of this effect is purely to show how a series could\n\t// be updated using the `reference` passed to the `Series` component.\n\tuseEffect(() => {\n\t\tif (series1.current === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (started) {\n\t\t\tconst interval = setInterval(() => {\n\t\t\t\tcurrentDate.setDate(currentDate.getDate() + 1);\n\t\t\t\tconst next = {\n\t\t\t\t\ttime: currentDate.toISOString().slice(0, 10),\n\t\t\t\t\tvalue: 53 - 2 * Math.random(),\n\t\t\t\t};\n\t\t\t\tseries1.current.update(next);\n\t\t\t}, 1000);\n\t\t\treturn () => clearInterval(interval);\n\t\t}\n\t}, [started]);\n\n\tuseEffect(() => {\n\t\tsetChartLayoutOptions({\n\t\t\tbackground: {\n\t\t\t\tcolor: backgroundColor,\n\n\t\t\t},\n\t\t\ttextColor,\n\t\t});\n\t}, [backgroundColor, textColor]);\n\n\treturn (\n\t\t<>\n\t\t\t<button type=\"button\" onClick={() => setStarted(current => !current)}>\n\t\t\t\t{started ? 'Stop updating' : 'Start updating series'}\n\t\t\t</button>\n\t\t\t<Chart layout={chartLayoutOptions}>\n\t\t\t\t<Series\n\t\t\t\t\tref={series1}\n\t\t\t\t\ttype={'line'}\n\t\t\t\t\tdata={initialData}\n\t\t\t\t\tcolor={lineColor}\n\t\t\t\t/>\n\t\t\t</Chart>\n\t\t</>\n\t);\n};\n\nexport function Chart(props) {\n\tconst [container, setContainer] = useState(false);\n\tconst handleRef = useCallback(ref => setContainer(ref), []);\n\treturn (\n\t\t<div ref={handleRef}>\n\t\t\t{container && <ChartContainer {...props} container={container} />}\n\t\t</div>\n\t);\n}\n\nexport const ChartContainer = forwardRef((props, ref) => {\n\tconst { children, container, layout, ...rest } = props;\n\n\tconst chartApiRef = useRef({\n\t\tapi() {\n\t\t\tif (!this._api) {\n\t\t\t\tthis._api = createChart(container, {\n\t\t\t\t\t...rest,\n\t\t\t\t\tlayout,\n\t\t\t\t\twidth: container.clientWidth,\n\t\t\t\t\theight: 300,\n\t\t\t\t});\n\t\t\t\tthis._api.timeScale().fitContent();\n\t\t\t}\n\t\t\treturn this._api;\n\t\t},\n\t\tfree() {\n\t\t\tif (this._api) {\n\t\t\t\tthis._api.remove();\n\t\t\t}\n\t\t},\n\t});\n\n\tuseLayoutEffect(() => {\n\t\tconst currentRef = chartApiRef.current;\n\t\tconst chart = currentRef.api();\n\n\t\tconst handleResize = () => {\n\t\t\tchart.applyOptions({\n\t\t\t\t...rest,\n\t\t\t\twidth: container.clientWidth,\n\t\t\t});\n\t\t};\n\n\t\twindow.addEventListener('resize', handleResize);\n\t\treturn () => {\n\t\t\twindow.removeEventListener('resize', handleResize);\n\t\t\tchart.remove();\n\t\t};\n\t}, []);\n\n\tuseLayoutEffect(() => {\n\t\tconst currentRef = chartApiRef.current;\n\t\tcurrentRef.api();\n\t}, []);\n\n\tuseLayoutEffect(() => {\n\t\tconst currentRef = chartApiRef.current;\n\t\tcurrentRef.api().applyOptions(rest);\n\t}, []);\n\n\tuseImperativeHandle(ref, () => chartApiRef.current.api(), []);\n\n\tuseEffect(() => {\n\t\tconst currentRef = chartApiRef.current;\n\t\tcurrentRef.api().applyOptions({ layout });\n\t}, [layout]);\n\n\treturn (\n\t\t<Context.Provider value={chartApiRef.current}>\n\t\t\t{props.children}\n\t\t</Context.Provider>\n\t);\n});\nChartContainer.displayName = 'ChartContainer';\n\nexport const Series = forwardRef((props, ref) => {\n\tconst parent = useContext(Context);\n\tconst context = useRef({\n\t\tapi() {\n\t\t\tif (!this._api) {\n\t\t\t\tconst { children, data, type, ...rest } = props;\n\t\t\t\tthis._api = type === 'line'\n\t\t\t\t\t? parent.api().addLineSeries(rest)\n\t\t\t\t\t: parent.api().addAreaSeries(rest);\n\t\t\t\tthis._api.setData(data);\n\t\t\t}\n\t\t\treturn this._api;\n\t\t},\n\t\tfree() {\n\t\t\tif (this._api) {\n\t\t\t\tparent.free();\n\t\t\t}\n\t\t},\n\t});\n\n\tuseLayoutEffect(() => {\n\t\tconst currentRef = context.current;\n\t\tcurrentRef.api();\n\n\t\treturn () => currentRef.free();\n\t}, []);\n\n\tuseLayoutEffect(() => {\n\t\tconst currentRef = context.current;\n\t\tconst { children, data, ...rest } = props;\n\t\tcurrentRef.api().applyOptions(rest);\n\t});\n\n\tuseImperativeHandle(ref, () => context.current.api(), []);\n\n\treturn (\n\t\t<Context.Provider value={context.current}>\n\t\t\t{props.children}\n\t\t</Context.Provider>\n\t);\n});\nSeries.displayName = 'Series';\n";var l=n(39277);const p=(0,a.createContext)(),u=[{time:"2018-10-11",value:52.89},{time:"2018-10-12",value:51.65},{time:"2018-10-13",value:51.56},{time:"2018-10-14",value:50.19},{time:"2018-10-15",value:51.86},{time:"2018-10-16",value:51.25}],h=new Date(u[u.length-1].time),d=t=>{const{colors:{backgroundColor:e=CHART_BACKGROUND_COLOR,lineColor:n=LINE_LINE_COLOR,textColor:r=CHART_TEXT_COLOR}={}}=t,[o,i]=(0,a.useState)({}),s=(0,a.useRef)(null),[c,l]=(0,a.useState)(!1);return(0,a.useEffect)((()=>{if(null!==s.current&&c){const t=setInterval((()=>{h.setDate(h.getDate()+1);const t={time:h.toISOString().slice(0,10),value:53-2*Math.random()};s.current.update(t)}),1e3);return()=>clearInterval(t)}}),[c]),(0,a.useEffect)((()=>{i({background:{color:e},textColor:r})}),[e,r]),a.createElement(a.Fragment,null,a.createElement("button",{type:"button",onClick:()=>l((t=>!t))},c?"Stop updating":"Start updating series"),a.createElement(f,{layout:o},a.createElement(C,{ref:s,type:"line",data:u,color:n})))};function f(t){const[e,n]=(0,a.useState)(!1),o=(0,a.useCallback)((t=>n(t)),[]);return a.createElement("div",{ref:o},e&&a.createElement(m,(0,r.Z)({},t,{container:e})))}const m=(0,a.forwardRef)(((t,e)=>{const{children:n,container:r,layout:o,...i}=t,s=(0,a.useRef)({api(){return this._api||(this._api=(0,l.C2)(r,{...i,layout:o,width:r.clientWidth,height:300}),this._api.timeScale().fitContent()),this._api},free(){this._api&&this._api.remove()}});return(0,a.useLayoutEffect)((()=>{const t=s.current.api(),e=()=>{t.applyOptions({...i,width:r.clientWidth})};return window.addEventListener("resize",e),()=>{window.removeEventListener("resize",e),t.remove()}}),[]),(0,a.useLayoutEffect)((()=>{s.current.api()}),[]),(0,a.useLayoutEffect)((()=>{s.current.api().applyOptions(i)}),[]),(0,a.useImperativeHandle)(e,(()=>s.current.api()),[]),(0,a.useEffect)((()=>{s.current.api().applyOptions({layout:o})}),[o]),a.createElement(p.Provider,{value:s.current},t.children)}));m.displayName="ChartContainer";const C=(0,a.forwardRef)(((t,e)=>{const n=(0,a.useContext)(p),r=(0,a.useRef)({api(){if(!this._api){const{children:e,data:r,type:a,...o}=t;this._api="line"===a?n.api().addLineSeries(o):n.api().addAreaSeries(o),this._api.setData(r)}return this._api},free(){this._api&&n.free()}});return(0,a.useLayoutEffect)((()=>{const t=r.current;return t.api(),()=>t.free()}),[]),(0,a.useLayoutEffect)((()=>{const e=r.current,{children:n,data:a,...o}=t;e.api().applyOptions(o)})),(0,a.useImperativeHandle)(e,(()=>r.current.api()),[]),a.createElement(p.Provider,{value:r.current},t.children)}));C.displayName="Series";var g=n(95804);const w={sidebar_label:"Advanced example",hide_table_of_contents:!0},R="React - Advanced example",b={unversionedId:"react/advanced",id:"react/advanced",title:"React - Advanced example",description:"The following describes a more complex scenario where a user could imagine splitting the responsibilities of the chart between components.",source:"@site/tutorials/react/02-advanced.mdx",sourceDirName:"react",slug:"/react/advanced",permalink:"/lightweight-charts/tutorials/react/advanced",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"Advanced example",hide_table_of_contents:!0},sidebar:"tutorialsSidebar",previous:{title:"Simple example",permalink:"/lightweight-charts/tutorials/react/simple"},next:{title:"Vue.js - Wrapper Component",permalink:"/lightweight-charts/tutorials/vuejs/wrapper"}},O={},_=[],k={toc:_},v="wrapper";function L(t){let{components:e,...n}=t;return(0,o.kt)(v,(0,r.Z)({},k,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"react---advanced-example"},"React - Advanced example"),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"The following describes a more complex scenario where a user could imagine splitting the responsibilities of the chart between components."),(0,o.kt)("p",{parentName:"admonition"},"If you want to consult a simpler approach please consult this ",(0,o.kt)("a",{parentName:"p",href:"./simple"},"example"),".")),(0,o.kt)("admonition",{type:"warning"},(0,o.kt)("p",{parentName:"admonition"},"By following the steps below we assume you're familiar with Lightweight Charts\u2122, how to set up a project using it and how to render a chart."),(0,o.kt)("p",{parentName:"admonition"},"If not, please follow this ",(0,o.kt)("a",{parentName:"p",href:"./simple"},"guide"),".")),(0,o.kt)("p",null,"If you're familiar with Lightweight Charts\u2122 you probably already know that a ",(0,o.kt)("em",{parentName:"p"},"Chart")," is a container that can contain one or more ",(0,o.kt)("a",{parentName:"p",href:"/docs/series-types"},(0,o.kt)("em",{parentName:"a"},"Series")),".\nEach ",(0,o.kt)("em",{parentName:"p"},"Series")," has its own options (for instance ",(0,o.kt)("a",{parentName:"p",href:"/docs/api/interfaces/AreaStyleOptions"},"AreaStyleOptions"),", ",(0,o.kt)("a",{parentName:"p",href:"/docs/api/interfaces/LineStyleOptions"},"LineStyleOptions"),", etc) in addition to ",(0,o.kt)("a",{parentName:"p",href:"/docs/price-scale"},"price")," and/or ",(0,o.kt)("a",{parentName:"p",href:"/docs/time-scale"},"time")," scale."),(0,o.kt)("p",null,"Based on this principle, one could easily imagine having a main component ",(0,o.kt)("em",{parentName:"p"},"Chart")," that could have some ",(0,o.kt)("em",{parentName:"p"},"Series")," children that could themselves have other children and so on.\nTherefore the structure could become something like"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"<Chart component>\n    <Series component 1>\n        <child component />\n    </Series component 1>\n    <Series component n>\n        <child component />\n    </Series component n>\n</Chart component>\n")),(0,o.kt)("p",null,"Even though it's possible to create a Chart without a Series, the complexity arises when another component wants to interact with any of its siblings/parent, like updating a series by adding more data or resizing the chart itself."),(0,o.kt)("p",null,"Given this tutorial is about React this is how we are going to define components relying on React ",(0,o.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/hooks-intro.html"},"Hooks")," and ",(0,o.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/composition-vs-inheritance.html"},"composition"),"."),(0,o.kt)("p",null,"However, one drawback with the way React and its hooks like ",(0,o.kt)("em",{parentName:"p"},"useEffect")," ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/issues/16728"},"work")," in a parent/children implementation is that their respective hooks are called in a bottom-up order for instanciation but top-to-bottom when it comes to clean-up."),(0,o.kt)("p",null,"The following skeleton illustrates the mechanism."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import React, { useEffect } from 'react';\n\nexport const ParentComponent = () => {\n    // this effect will be triggered in position 3\n    useEffect(() =>\n        () => {\n            // this clean up will be triggered in position 1\n        }\n    , []);\n\n    // this effect will be triggered in position 4\n    useEffect(() =>\n        () => {\n            // this clean up will be triggered in position 2\n        }\n    , []);\n\n    // The parent will then return Following bit is to propagate all props & internalRef object down to children\n    return (\n        <ChildComponent />\n    );\n};\nParentComponent.displayName = 'ParentComponent';\n\nexport const ChildComponent = () => {\n    // this effect will be triggered in position 1\n    useEffect(() =>\n        () => {\n            // this clean up will be triggered in position 3\n        }\n    , []);\n\n    // this effect will be triggered in position 2\n    useEffect(() =>\n        () => {\n            // this clean up will be triggered in position 4\n        }\n    , []);\n\n    return (\n        <div />\n    );\n};\nChildComponent.displayName = 'ChildComponent';\n")),(0,o.kt)("p",null,"In essence, taking the example above, it means that a ",(0,o.kt)("inlineCode",{parentName:"p"},"ChildComponent")," (aka Series) would be created first whilst requiring a ",(0,o.kt)("inlineCode",{parentName:"p"},"ParentComponent")," (aka Chart)."),(0,o.kt)("p",null,"To achieve that, we will have to rely on a few hooks and take advantage of the way they work in addition to use ",(0,o.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/forwarding-refs.html"},"ref/forwardRef")," which is a technique to pass down properties from one component to its children."),(0,o.kt)("p",null,'In the end the "visible" structure and usage will be alike but internally it will be something like:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"<Chart component>\n    <ChartContainer>\n        <Series component 1>\n            <child component />\n        </Series component 1>\n        <Series component n>\n            <child component />\n        </Series component n>\n    </ChartContainer>\n</Chart component>\n")),(0,o.kt)("p",null,"where the ChartContainer's role would be needed to attach a DOMElement on which the chart will render.\nChartContainer will be responsible for creating a ",(0,o.kt)("strong",{parentName:"p"},"ref"),"erence that will hold functions to handle the lifecycle of the chart.\nThat reference will then be propagated down to the Series."),(0,o.kt)("p",null,"The same technique will be used within the Series component to handle this time the lifecycle of any Series along with adding data to be plotted."),(0,o.kt)("p",null,'Moreover those 2 "main" components will "expose" whatever functions the user wants from the internal reference object at a higher level, meaning once those references are accessible any other component would then be able to act on either the Chart or any Series.'),(0,o.kt)("p",null,"Here's a skeleton of what the final structure would be like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import React, { useEffect, useImperativeHandle, useRef, createContext, forwardRef } from 'react';\n\nconst Context = createContext();\n\nexport const MainComponent = props =>\n    // Creates the first reference and instanciate a ParentComponent\n    (\n        <div ref={chartReference}>\n            <ParentComponent {...props} container={container} />\n        </div>\n    );\n\nexport const ParentComponent = forwardRef((props, ref) => {\n    const internalRef = useRef({\n        method1() {\n            // This function would be responsible for creating the chart for instance\n        },\n        methodn() {\n            // This function would be responsible for cleaning up the chart\n        },\n    });\n\n    // this effect will be triggered in position 3\n    useEffect(() =>\n        () => {\n            // this clean up will be triggered in position 1\n        }\n    , []);\n\n    // this effect will be triggered in position 4\n    useEffect(() =>\n        () => {\n            // this clean up will be triggered in position 2\n        }\n    , []);\n\n    useImperativeHandle(ref, () => {\n        // That's the hook responsible for exposing part of/entirety of internalRef\n    }, []);\n\n    // Following bit is to propagate all props & internalRef object down to children\n    return (\n        <Context.Provider value={internalRef.current}>\n            {props.children}\n        </Context.Provider>\n    );\n});\nParentComponent.displayName = 'ParentComponent';\n\nexport const ChildComponent = forwardRef((props, ref) => {\n    const internalRef = useRef({\n        method1() {\n            // This function would be responsible for creating a series\n        },\n        methodn() {\n            // This function would be responsible for removing it\n        },\n    });\n\n    // this effect will be triggered in position 1\n    useEffect(() =>\n        () => {\n            // this clean up will be triggered in position 3\n        }\n    , []);\n\n    // this effect will be triggered in position 2\n    useEffect(() =>\n        () => {\n            // this clean up will be triggered in position 4\n        }\n    , []);\n\n    useImperativeHandle(ref, () => {\n        // That's the hook responsible for exposing part of/entirety of internalRef\n    }, []);\n\n    // Following bit is to propagate all props & internalRef object down to children\n    return (\n        <Context.Provider value={internalRef.current}>\n            {props.children}\n        </Context.Provider>\n    );\n});\nChildComponent.displayName = 'ChildComponent';\n")),(0,o.kt)("p",null,"By considering all the above you could end up with Chart/Series components looking like the following"),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"For this example we are using props to set chart colors based on the current theme (light or dark). In your real code it might be a better idea to use a ",(0,o.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/context.html#when-to-use-context"},"Context"),".")),(0,o.kt)(s.ZP,{replaceThemeConstants:!0,className:"language-jsx",mdxType:"CodeBlock"},c),(0,o.kt)("p",null,"The code above will produce a line series.\nGiven a ",(0,o.kt)("inlineCode",{parentName:"p"},"series1")," reference is created to be passed to the Series component you could reuse that object via ",(0,o.kt)("inlineCode",{parentName:"p"},"series1.current.[any function applicable on Series]"),"."),(0,o.kt)("p",null,"For instance and as shown below ",(0,o.kt)("inlineCode",{parentName:"p"},"series1.current.update(new data)")," is used upon clicking on the button."),(0,o.kt)("div",{className:g.Z.ChartContainer},(0,o.kt)(i.Z,{ChartComponent:d,mdxType:"ThemedChart"})))}L.isMDXComponent=!0},98007:(t,e,n)=>{n.d(e,{ZP:()=>g});var r=n(67294),a=n(90814),o=n(91262),i=n(92949),s=n(60373),c=n(44908);function l(t,e,n){t.addEventListener("resize",(()=>{const t=e.getBoundingClientRect();n(t.width,t.height)}),!0)}const p={3.8:async t=>{const e=await n.e(3115).then(n.bind(n,3115));return{module:e,createChart:(n,r)=>{const a=e.createChart(n,r);return l(t,n,a.resize.bind(a)),a}}},"4.0":async t=>{const e=await n.e(1539).then(n.bind(n,81539));return{module:e,createChart:(n,r)=>{const a=e.createChart(n,r);return l(t,n,a.resize.bind(a)),a}}},4.1:async t=>{const e=await n.e(8992).then(n.bind(n,39876));return{module:e,createChart:(n,r)=>{const a=e.createChart(n,r);return l(t,n,a.resize.bind(a)),a}}},current:async()=>{const t=await n.e(6738).then(n.bind(n,66738));return{module:t,createChart:(e,n)=>{const r=t.createChart(e,n);return l(window,e,r.resize.bind(r)),r}}}},u="iframe_R_Fr";function h(t){const{script:e,iframeStyle:n}=t,{preferredVersion:a}=(0,s.J)(),o=c&&c.length>0?c[0]:"",i=a?.name??o??"current",l=function(t){return`\n\t\t<style>\n\t\t\thtml,\n\t\t\tbody,\n\t\t\t#container {\n\t\t\t\twidth: 100%;\n\t\t\t\theight: 100%;\n\t\t\t\toverflow: hidden;\n\t\t\t\tmargin: 0;\n\t\t\t}\n\t\t</style>\n\t\t<div id="container"></div>\n\t\t<script>\n\t\t\twindow.run = () => {\n\t\t\t\t${t}\n\t\t\t};\n\t\t<\/script>\n\t`}(e),h=r.useRef(null);return r.useEffect((()=>{const t=h.current,e=t?.contentWindow,n=t?.contentDocument;if(null===t||!e||!n)return;const r=async()=>{try{const{module:t,createChart:n}=await p[i](e);Object.assign(e,t),e.createChart=n,e.run?.()}catch(t){console.error(t)}};if(void 0!==e.run)r();else{const e=()=>{r(),t.removeEventListener("load",e)};t.addEventListener("load",e)}}),[l]),r.createElement("iframe",{key:e,ref:h,srcDoc:l,className:u,style:n})}var d=n(43864);const f=()=>`${Math.random().toString(36).slice(2,11)}`;function m(t){return"string"==typeof t?t:function(){const[t,e]=(0,r.useState)("");return(0,r.useEffect)((()=>e(f())),[]),t}()}const C=Object.keys(d.l.DARK);const g=t=>{const{chart:e,replaceThemeConstants:n,hideableCode:s,chartOnly:c,iframeStyle:l,...p}=t;let{children:f}=t;const{colorMode:g}=(0,i.I)(),w="dark"===g,R=m();return n&&"string"==typeof f&&(f=function(t,e){const n=e?d.l.DARK:d.l.LIGHT;let r=t;for(const a of C)r=r.replace(new RegExp(a,"g"),`'${n[a]}'`);return r}(f,w)),f=f.replace(new RegExp(/\/\/ delete-start[\w\W]*?\/\/ delete-end/,"gm"),""),e||s?r.createElement(r.Fragment,null,s&&r.createElement(r.Fragment,null,r.createElement("input",{id:R,type:"checkbox",className:"toggle-hidden-lines"}),r.createElement("label",{className:"toggle-label",htmlFor:R},"Show all code")),!c&&r.createElement(a.Z,p,f),e&&r.createElement(o.Z,{fallback:r.createElement("div",{className:u},"\xa0")},(()=>r.createElement(h,{script:f,iframeStyle:l})))):r.createElement(a.Z,p,f)}},96383:(t,e,n)=>{n.d(e,{Z:()=>s});var r=n(92949),a=n(67294),o=n(43864);function i(t){const e=t?"DARK":"LIGHT";return{backgroundColor:o.l[e].CHART_BACKGROUND_COLOR,lineColor:o.l[e].LINE_LINE_COLOR,textColor:o.l[e].CHART_TEXT_COLOR,areaTopColor:o.l[e].AREA_TOP_COLOR,areaBottomColor:o.l[e].AREA_BOTTOM_COLOR}}function s(t){const{ChartComponent:e}=t,n=function(){const{colorMode:t}=(0,r.I)(),e="dark"===t,[n,o]=(0,a.useState)(i(e));return(0,a.useEffect)((()=>{o(i(e))}),[e]),n}();return a.createElement(e,{colors:n})}},43864:(t,e,n)=>{n.d(e,{l:()=>r});const r={DARK:{CHART_BACKGROUND_COLOR:"black",CHART_BACKGROUND_RGB_COLOR:"0, 0, 0",LINE_LINE_COLOR:"#2962FF",AREA_TOP_COLOR:"#2962FF",AREA_BOTTOM_COLOR:"rgba(41, 98, 255, 0.28)",BAR_UP_COLOR:"#26a69a",BAR_DOWN_COLOR:"#ef5350",BASELINE_TOP_LINE_COLOR:"rgba( 38, 166, 154, 1)",BASELINE_TOP_FILL_COLOR1:"rgba( 38, 166, 154, 0.28)",BASELINE_TOP_FILL_COLOR2:"rgba( 38, 166, 154, 0.05)",BASELINE_BOTTOM_LINE_COLOR:"rgba( 239, 83, 80, 1)",BASELINE_BOTTOM_FILL_COLOR1:"rgba( 239, 83, 80, 0.05)",BASELINE_BOTTOM_FILL_COLOR2:"rgba( 239, 83, 80, 0.28)",HISTOGRAM_COLOR:"#26a69a",CHART_TEXT_COLOR:"white"},LIGHT:{CHART_BACKGROUND_COLOR:"white",CHART_BACKGROUND_RGB_COLOR:"255, 255, 255",LINE_LINE_COLOR:"#2962FF",AREA_TOP_COLOR:"#2962FF",AREA_BOTTOM_COLOR:"rgba(41, 98, 255, 0.28)",BAR_UP_COLOR:"#26a69a",BAR_DOWN_COLOR:"#ef5350",BASELINE_TOP_LINE_COLOR:"rgba( 38, 166, 154, 1)",BASELINE_TOP_FILL_COLOR1:"rgba( 38, 166, 154, 0.28)",BASELINE_TOP_FILL_COLOR2:"rgba( 38, 166, 154, 0.05)",BASELINE_BOTTOM_LINE_COLOR:"rgba( 239, 83, 80, 1)",BASELINE_BOTTOM_FILL_COLOR1:"rgba( 239, 83, 80, 0.05)",BASELINE_BOTTOM_FILL_COLOR2:"rgba( 239, 83, 80, 0.28)",HISTOGRAM_COLOR:"#26a69a",CHART_TEXT_COLOR:"black"}}},95804:(t,e,n)=>{n.d(e,{Z:()=>r});const r={ChartContainer:"ChartContainer_Hwvl"}},44908:t=>{t.exports=["4.1","4.0","3.8"]}}]);